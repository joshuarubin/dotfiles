" leader mappings
if has('eval')
  nnoremap <silent> <leader>n :silent :nohlsearch<cr>

  " find merge conflict markers
  noremap <leader>fc /\v^[<\|=>]{7}( .*\|$)<cr>

  nnoremap <silent> <leader>q :qa<cr>
  nnoremap <silent> <leader>Q :qa!<cr>

  " <leader>cd: Switch to the directory of the open buffer
  nnoremap <leader>cd :lcd %:p:h<cr>:pwd<cr>

  " <leader>,: Switch to previous window
  nnoremap <leader>p <c-w>p

  " <leader>m: Toggle Maximize current window
  nnoremap <leader>m :call rubix#maximize_toggle()<cr>

  " adjust viewports to the same size
  noremap <leader>= <c-w>=

  nnoremap <leader>fR :source $MYVIMRC<cr>

  vnoremap <leader>s :sort<cr>

  for s:i in range(1, 9)
    " <leader>[1-9] move to window [1-9]
    execute 'nnoremap <silent> <leader>'.s:i ' :'.s:i.'wincmd w<cr>'

    " <leader>b[1-9] move to buffer [1-9]
    execute 'nnoremap <silent> <leader>b'.s:i ':b'.s:i.'<cr>'
  endfor
  unlet s:i
endif

cnoremap <c-j> <down>
cnoremap <c-k> <up>
cnoremap <c-f> <left>
cnoremap <c-g> <right>

" ctrl-v: Paste
cnoremap <c-v> <c-r>"

" Q: Closes the window
nnoremap <silent> Q :q<cr>

" W: Save
nnoremap <silent> W :w<cr>

" Y: yank from the cursor to the end of the line (like D and C)
nnoremap Y y$

" U: Redos since 'u' undos
nnoremap U :redo<cr>

" _ : Quick horizontal splits
nnoremap <silent> _ :sp<cr>

" | : Quick vertical splits
nnoremap <silent> <bar> :vsp<cr>

" +/-: Increment number
nnoremap + <c-a>
nnoremap - <c-x>

" ctrl-sr: Easier (s)earch and (r)eplace
nnoremap <c-s><c-r> :%s/<c-r><c-w>//gc<left><left><left>

" ctrl-w: Delete previous word, create undo point
inoremap <c-w> <c-g>u<c-w>

" ctrl-s: Save
inoremap <c-s> <esc>:w<cr>

inoremap <expr> <down> pumvisible() ? "\<c-n>" : "\<down>"
inoremap <expr> <up>   pumvisible() ? "\<c-p>" : "\<up>"

" ctrl-c: Inserts line below
inoremap <c-c> <c-o>o

" ctrl-v: Paste. For some reason, <c-o> is not creating an undo point in the mapping
inoremap <c-v> <c-g>u<c-o>gP

" ctrl-c: copy (works with system clipboard due to clipboard setting)
vnoremap <c-c> y`]

" d: Delete into the blackhole register to not clobber the last yank
nnoremap d "_d

" dd: I use this often to yank a single line, retain its original behavior
nnoremap dd dd

" gp to visually select pasted text
nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

" c: Change into the blackhole register to not clobber the last yank
nnoremap c "_c

" y: Yank and go to end of selection
xnoremap y y`]

" p: Paste in visual mode should not replace the default register with the deleted text
xnoremap p "_dP

" d: Delete into the blackhole register to not clobber the last yank. To 'cut', use 'x' instead
xnoremap d "_d

" enter: Highlight visual selections
xnoremap <silent> <cr> y:let @/ = @"<cr>:set hlsearch<cr>

" backspace: Delete selected and go into insert mode
xnoremap <bs> c

" <|>: Reselect visual block after indent
xnoremap < <gv
xnoremap > >gv

" .: repeats the last command on every line
xnoremap . :normal.<cr>

" @: repeats macro on every line
xnoremap @ :normal@

" tab: Indent (allow recursive)
xmap <tab> >

" shift-tab: unindent (allow recursive)
xmap <s-tab> <

" ctrl-a r to redraw the screen now
noremap <silent> <c-a>r :redraw!<cr>

" ctrl-w to delete the current buffer without closing the window
nnoremap <silent> <c-w><c-w> :confirm :Kwbd<cr>

" plugin specific mappings
if has('eval')
{{- if not .slow }}
  " easymotion
  map <silent> <leader><leader>f <plug>(easymotion-f)
  map <silent> <leader><leader>F <plug>(easymotion-F)
  map <silent> <leader><leader>t <plug>(easymotion-t)
  map <silent> <leader><leader>T <plug>(easymotion-T)
  map <silent> <leader><leader>w <plug>(easymotion-w)
  map <silent> <leader><leader>W <plug>(easymotion-W)
  map <silent> <leader><leader>b <plug>(easymotion-b)
  map <silent> <leader><leader>B <plug>(easymotion-B)
  map <silent> <leader><leader>e <plug>(easymotion-e)
  map <silent> <leader><leader>E <plug>(easymotion-E)
  map <silent> <leader><leader>ge <plug>(easymotion-ge)
  map <silent> <leader><leader>gE <plug>(easymotion-gE)
  map <silent> <leader><leader>j <plug>(easymotion-j)
  map <silent> <leader><leader>k <plug>(easymotion-k)
  map <silent> <leader><leader>n <plug>(easymotion-n)
  map <silent> <leader><leader>N <plug>(easymotion-N)
  map <silent> <leader><leader>s <plug>(easymotion-s)

  " undotree
  nnoremap <leader>u :UndotreeToggle<cr>

  " vista
  nnoremap <silent> <c-g> :Vista!!<cr>

  " fugitive/gitv
  nnoremap <silent> <leader>gs :Gstatus<cr>
  nnoremap <silent> <leader>gd :Gvdiff<cr>
  nnoremap <silent> <leader>gc :Gcommit<cr>
  nnoremap <silent> <leader>gb :Gblame<cr>
  nnoremap <silent> <leader>gl :Glog<cr>
  nnoremap <silent> <leader>gp :Gpush<cr>
  nnoremap <silent> <leader>gr :Gremove<cr>
  nnoremap <silent> <leader>gw :Gwrite<cr>
  nnoremap <silent> <leader>ge :Gedit<cr>
  nnoremap <silent> <leader>g. :Gcd<cr>:pwd<cr>
  nnoremap <silent> <leader>gu :Gpull<cr>
  nnoremap <silent> <leader>gn :Gmerge<cr>
  nnoremap <silent> <leader>gf :Gfetch<cr>
  nnoremap <silent> <leader>gv :Gitv<cr>
  nnoremap <silent> <leader>gV :Gitv!<cr>

  nmap <leader>gm <plug>(git-messenger)

  " - if completion popup is showing:
  "   - if nothing is selected and the text is expandable, expand it
  "   - else accept the completion entry
  " - else if the text is expandable, expand it
  " - else if endwise exists, use it to complete (includes <cr>)
  " - else <cr>
  inoremap <silent> <expr> <cr>
    \ pumvisible() && len(v:completed_item) == 0 && neosnippet#expandable() ? neosnippet#mappings#expand_impl() :
    \ pumvisible() ? "\<c-y>" :
    \ neosnippet#expandable() ? neosnippet#mappings#expand_impl() :
    \ "\<c-g>u\<cr>\<c-r>=coc#on_enter()\<cr>\<c-r>=EndwiseDiscretionary()<cr>"

  " - if completion popup is showing:
  "   - if nothing is selected and the text is jumpable, jump next (for coc and neosnippet)
  "   - else select next completion
  " - else if the text is jumpable, jump next (for coc and neosnippet)
  " - else <tab>
  inoremap <expr> <tab>
    \ pumvisible() ? "\<c-n>" :
    \ neosnippet#jumpable() ? neosnippet#mappings#jump_impl() :
    \ coc#jumpable() ? coc#rpc#request('snippetNext', []) :
    \ "\<tab>"

  " - if completion popup is showing:
  "   - if nothing is selected and the text is jumpable, jump prev (for coc)
  "   - else select previous completion
  " - else if the text is jumpable, jump prev (for coc)
  " - else <backspace>
  inoremap <expr> <s-tab>
    \ pumvisible() && len(v:completed_item) == 0 && coc#jumpable() ? coc#rpc#request('snippetPrev', []) :
    \ pumvisible() ? "\<c-p>" :
    \ coc#jumpable() ? coc#rpc#request('snippetPrev', []) :
    \ "\<c-h>"

  " when filling out expanded snippet, jump prev (for coc)
  snoremap <expr> <s-tab>
    \ coc#jumpable() ? coc#rpc#request('snippetPrev', []) :
    \ ""

  " when filling out expanded snippet, jump next (for coc and neosnippet)
  snoremap <expr> <tab>
    \ neosnippet#jumpable() ? neosnippet#mappings#jump_impl() :
    \ coc#jumpable() ? coc#rpc#request('snippetNext', []) :
    \ "\<tab>"

  " show the completion popup
  inoremap <silent> <expr> <c-space> coc#refresh()

  " - if completion popup is showing:
  "   - select completed value and switch to normal mode (note that this will not
  "     do snippet completion because it is async and the switch to normal mode
  "     happens first
  " - else <esc>
  " must be imap or else <esc> after iabbr doesn't expand
  imap <expr> <silent> <esc> pumvisible() ? "\<c-y>\<esc>" : "\<esc>"

  " fzf
  nnoremap <silent> <c-p> :FilesProjectDir<cr>
  nnoremap <silent> <c-b> :Buffers<cr>
  nnoremap <silent> <c-f> :RubixHistory<cr>
  nnoremap <silent> <c-s><c-a> :RgRepeat<cr>
  nnoremap <silent> <c-s><c-s> :RgProjectDirCursor<cr>
  nnoremap <silent> <c-s><c-d> :RgProjectDirPrompt<cr>
  nnoremap <silent> <c-s><c-f> :BLines<cr>

  nmap <leader>? <plug>(fzf-maps-n)
  xmap <leader>? <plug>(fzf-maps-x)
  omap <leader>? <plug>(fzf-maps-o)

  " netrw
  noremap <silent> <c-n> :Defx<cr>

  " coc mappings
  nmap <silent> gd <plug>(coc-definition)
  nmap <silent> gy <plug>(coc-type-definition)
  nmap <silent> gi <plug>(coc-implementation)
  nmap <silent> gr <plug>(coc-references)

  nnoremap <silent> K :call <sid>show_documentation()<cr>

  function! s:show_documentation() abort
    if &filetype ==# 'vim'
      execute 'help '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  command! -nargs=0 Format :call CocAction('format')

  nnoremap <silent> <leader>cl :<c-u>CocList diagnostics<cr>
  nnoremap <silent> <leader>ce :<c-u>CocList extensions<cr>
  nnoremap <silent> <leader>cc :<c-u>CocList commands<cr>
  nnoremap <silent> <leader>co :<c-u>CocList outline<cr>
  nnoremap <silent> <leader>cs :<c-u>CocList -I symbols<cr>
  nnoremap <silent> <leader>cj :<c-u>CocNext<cr>
  nnoremap <silent> <leader>ck :<c-u>CocPrev<cr>
  nnoremap <silent> <leader>cp :<c-u>CocListResume<cr>
  nmap <leader>ca <plug>(coc-codeaction)
  nmap <leader>cf <plug>(coc-fix-current)
  nmap <leader>cr <plug>(coc-rename)
{{- end }}

  " formatting shortcuts
  nnoremap <leader>fa :call rubix#preserve('normal gg=G')<cr>
  nnoremap <leader>f$ :call rubix#trim()<cr>

  " surround
  " ctrl-sw: Quickly surround word (must be recursive)
  nmap <c-s><c-w> ysiw

  " bufsurf
  nnoremap <silent> Z :BufSurfBack<cr>
  nnoremap <silent> X :BufSurfForward<cr>

  tnoremap <silent> <expr> <c-x> rubix#terminal#save_mode() . ":TerminalToggle\<cr>"
  tnoremap <silent> <expr> <c-a>X rubix#terminal#save_mode() . ":TerminalToggle!\<cr>"
  nnoremap <silent> <c-x> :TerminalToggle<cr>
  inoremap <silent> <c-x> <c-\><c-n>:TerminalToggle<cr>

  nnoremap <silent> <leader>t :call rubix#terminal#new()<cr>

  nnoremap <silent> <leader>bh :Startify<cr>

  nmap <leader>w <plug>(choosewin)

  map n <plug>(anzu-n-with-echo)
  map N <plug>(anzu-N-with-echo)
endif

" tmux style navigation
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

vnoremap <c-h> <c-w>h
vnoremap <c-j> <c-w>j
vnoremap <c-l> <c-w>l
vnoremap <c-k> <c-w>k

inoremap <c-h> <esc><c-w>h
inoremap <c-l> <esc><c-w>l

inoremap <expr> <c-j> pumvisible() ? "\<c-n>" : "\<esc>\<c-w>j"
inoremap <expr> <c-k> pumvisible() ? "\<c-p>" : "\<esc>\<c-w>k"

if has('nvim')
  tnoremap <expr> <c-h> rubix#terminal#save_mode() . "\<c-w>h"
  tnoremap <expr> <c-j> rubix#terminal#save_mode() . "\<c-w>j"
  tnoremap <expr> <c-k> rubix#terminal#save_mode() . "\<c-w>k"
  tnoremap <expr> <c-l> rubix#terminal#save_mode() . "\<c-w>l"

  tnoremap <c-y> <c-\><c-n><c-y>
  tnoremap <c-u> <c-\><c-n><c-u>

  tnoremap <silent> <expr> <c-p> rubix#terminal#save_mode() . ":FilesProjectDir\<cr>"
  tnoremap <silent> <expr> <c-b> rubix#terminal#save_mode() . ":Buffers\<cr>"

  " switch to insert mode and press <up> for shell history when in normal mode
  autocmd MyAutoCmd TermOpen * nnoremap <buffer> <up> i<up>
  autocmd MyAutoCmd TermOpen * nnoremap <buffer> <c-r> i<c-r>

  " disable macros in terminal windows
  autocmd MyAutoCmd TermOpen * nnoremap <buffer> q <nop>

  autocmd MyAutoCmd TermOpen * :call rubix#terminal#setup()
elseif has('terminal')
  tnoremap <c-h> <c-w>h
  tnoremap <c-j> <c-w>j
  tnoremap <c-k> <c-w>k
  tnoremap <c-l> <c-w>l
  tnoremap <c-y> <c-\><c-n><c-y>
  tnoremap <c-u> <c-\><c-n><c-u>
  tnoremap <c-w> <c-w>.

  tnoremap <silent> <c-p> <c-\><c-n>:FilesProjectDir<cr>
  tnoremap <silent> <c-b> <c-\><c-n>:Buffers<cr>

  " switch to insert mode and press <up> for shell history when in normal mode
  autocmd MyAutoCmd TerminalOpen * nnoremap <buffer> <up> i<up>
  autocmd MyAutoCmd TerminalOpen * nnoremap <buffer> <c-r> i<c-r>

  " disable macros in terminal windows
  autocmd MyAutoCmd TerminalOpen * nnoremap <buffer> q <nop>

  autocmd MyAutoCmd TerminalOpen * :call rubix#terminal#setup()
endif

" resize window
nnoremap <silent> <c-a>H <c-w><
nnoremap <silent> <c-a>L <c-w>>
nnoremap <silent> <c-a>J <c-w>+
nnoremap <silent> <c-a>K <c-w>-
vnoremap <silent> <c-a>H <c-w><
vnoremap <silent> <c-a>L <c-w>>
vnoremap <silent> <c-a>J <c-w>+
vnoremap <silent> <c-a>K <c-w>-
inoremap <silent> <c-a>H <esc><c-w><
inoremap <silent> <c-a>L <esc><c-w>>
inoremap <silent> <c-a>J <esc><c-w>+
inoremap <silent> <c-a>K <esc><c-w>-
tnoremap <silent> <c-a>H <c-\><c-n><c-w><
tnoremap <silent> <c-a>L <c-\><c-n><c-w>>
tnoremap <silent> <c-a>J <c-\><c-n><c-w>+
tnoremap <silent> <c-a>K <c-\><c-n><c-w>-

" abbreviations
iabbrev TODO TODO(jawa)
iabbrev meml me@jawa.dev
iabbrev weml joshua@ngrok.com

" vim: ft=vim
